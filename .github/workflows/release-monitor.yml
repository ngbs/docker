name: Monitor Repositories for Releases

on:
  schedule:
    - cron: "0 * * * *"
  repository_dispatch:
    types: [release]
    repositories:
      - caddyserver/caddy
      - sagernet/sing-box
      - xtls/xray-core
      - fatedier/frp
      - go-acme/lego

jobs:
  monitor-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Define Repository and Build Map
        id: define_map
        run: |
          REPO_BUILD_MAP=$(cat <<EOF
          {
            "caddyserver/caddy":"build-caddy",
            "sagernet/sing-box":"build-sing-box",
            "xtls/xray-core":"build-xray",
            "fatedier/frp":"build-frp",
            "go-acme/lego":"build-lego"
          }
          EOF
          )
          echo "::set-output name=repo_build_map::$REPO_BUILD_MAP"

      - name: Check for new releases
        id: check_releases
        run: |
          repo_build_map=$(echo "${{ steps.define_map.outputs.repo_build_map }}")
          for repo in $(echo "${repo_build_map}" | jq -r 'keys[]'); do
            latest_tag=$(curl -s "https://api.github.com/repos/$repo/releases/latest" | jq -r '.tag_name')
            echo "::set-output name=${repo//\//_}_tag::$latest_tag"
          done

      - name: Trigger build on release
        if: steps.check_releases.outputs.caddyserver_caddy != "" \
          || steps.check_releases.outputs.sagernet_sing_box != "" \
          || steps.check_releases.outputs.xtls_xray_core != "" \
          || steps.check_releases.outputs.fatedier_frp != "" \
          || steps.check_releases.outputs.go_acme_lego != ""
        run: |
          echo "New release detected! Triggering build workflows."

          repo_build_map=$(echo "${{ steps.define_map.outputs.repo_build_map }}")

          for repo in $(echo "${repo_build_map}" | jq -r 'keys[]'); do
            if [ "${{ steps.check_releases.outputs[$repo] }}" != "" ]; then
              event_type=$(echo "${repo_build_map}" | jq -r ".[\"$repo\"]")
              break
            fi
          done

          event_type="${event_type:-unknown}"

          curl -X POST \
            -H "Authorization: token ${{ secrets.PA_TOKEN }}" \
            -H "Accept: application/vnd.github.everest-preview+json" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/ngbs/docker/dispatches \
            -d "{\"event_type\": \"$event_type\"}"
