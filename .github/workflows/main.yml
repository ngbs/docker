name: CI to Docker Hub

on:
  schedule:
    - cron: "0 0 1,15 * *"
  workflow_dispatch:

jobs:
  build-basic:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Get latest Alpine version
        run: |
          mkdir -p version_cache
          touch version_cache/stored_alpine_version.txt

          latest_version=$(curl -fsS https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/x86_64/latest-releases.yaml | grep -m1 -oP 'version: \K.*')
          echo "ALPINE_VERSION=${latest_version}" >> $GITHUB_ENV

          if [ ! -f version_cache/stored_alpine_version.txt ] || [ "$(cat version_cache/stored_alpine_version.txt)" != "${latest_version}" ]; then
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
          else
            echo "VERSION_CHANGED=false" >> $GITHUB_ENV
          fi

      - name: Verify Alpine Integrity
        if: env.VERSION_CHANGED == 'true'
        run: |
          cd version_cache

          wget https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/x86_64/alpine-minirootfs-${ALPINE_VERSION}-x86_64.tar.gz
          wget https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/x86_64/alpine-minirootfs-${ALPINE_VERSION}-x86_64.tar.gz.sha256

          sha256sum -c alpine-minirootfs-${ALPINE_VERSION}-x86_64.tar.gz.sha256

          wget https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/x86_64/alpine-minirootfs-${ALPINE_VERSION}-x86_64.tar.gz.sha256.asc
          gpg --keyserver hkps://keys.openpgp.org --recv-keys 0482D84022F52DF1C4E7CD43293ACD0907D9495A || \
          gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys 0482D84022F52DF1C4E7CD43293ACD0907D9495A
          gpg --verify alpine-minirootfs-${ALPINE_VERSION}-x86_64.tar.gz.sha256.asc

      - name: Login to Docker Hub
        if: env.VERSION_CHANGED == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Login to GitHub Container Registry
        if: env.VERSION_CHANGED == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        if: env.VERSION_CHANGED == 'true'
        uses: docker/build-push-action@v5
        id: docker_build_apline_latest
        with:
          context: ./alpine
          file: ./alpine/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/alpine:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/alpine:${{ env.ALPINE_VERSION }}
            ghcr.io/${{ github.repository }}/alpine:latest
            ghcr.io/${{ github.repository }}/alpine:${{ env.ALPINE_VERSION }}
          builder: ${{ steps.buildx.outputs.name }}

      - name: Build and push Docker images (Edge)
        if: env.VERSION_CHANGED == 'true'
        uses: docker/build-push-action@v5
        id: docker_build_apline_edge
        with:
          context: ./alpine
          file: ./alpine/Dockerfile.edge
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/alpine:edge
            ghcr.io/${{ github.repository }}/alpine:edge
          builder: ${{ steps.buildx.outputs.name }}

      - name: Update stored Alpine version
        if: ${{ steps.docker_build_apline_latest.outputs.digest != '' }}
        run: |
          echo "${{ env.ALPINE_VERSION }}" > version_cache/stored_alpine_version.txt

      - name: Scan image with Trivy
        if: success() && env.VERSION_CHANGED == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_HUB_USERNAME }}/alpine:${{ env.ALPINE_VERSION }}
          format: "table"
          exit-code: "1"
          severity: "HIGH,CRITICAL"
