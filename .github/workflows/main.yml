# This is a basic workflow to help you get started with Actions

name: CI to Docker Hub

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  # push:
  #   branches: [ master ]
  # pull_request:
  #   branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-basic:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check Out Repo
        uses: actions/checkout@v2
      
      # This is the a separate action that sets up buildx runner
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      
      # So now you can use Actions' own caching!
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      
      - name: Build Alpine Latest and push
        id: docker_build_apline_latest
        uses: docker/build-push-action@v2
        with:
          context: ./alpine
          file: ./alpine/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/alpine:latest
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      
      - name: Build Alpine Edge and push
        id: docker_build_apline_edge
        uses: docker/build-push-action@v2
        with:
          context: ./alpine
          file: ./alpine/Dockerfile.edge
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/alpine:edge
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      
      - name: Image digest
        run: echo ${{ steps.docker_build_apline_latest.outputs.digest }} \
             echo ${{ steps.docker_build_apline_edge.outputs.digest }}

      # Runs a single command using the runners shell
      # - name: Run a one-line script
      #   run: echo Hello, world!

      # Runs a set of commands using the runners shell
      # - name: Run a multi-line script
      #   run: |
      #     echo Add other actions to build,
      #     echo test, and deploy your project.

  build-other:
    needs: build-basic
    runs-on: ubuntu-latest
    steps:
    
      - name: Set variables
        run: |
          echo "DNSCRYPT_PROXY_VERSION=$(curl -fsSL https://api.github.com/repos/dnscrypt/dnscrypt-proxy/releases/latest | grep '"tag_name":' | head -n 1 | sed -E 's/.*"([^"]+)".*/\1/')" >> $GITHUB_ENV
          cat $GITHUB_ENV
        shell: bash

      - name: Check Out Repo
        uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      
      - name: Build ChinaDNS-NG and push
        id: docker_build_chinadns_ng
        uses: docker/build-push-action@v2
        with:
          context: ./chinadns-ng
          file: ./chinadns-ng/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/chinadns-ng:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/chinadns-ng:1.0-beta25
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      
      - name: Build DNSCrypt-Proxy and push
        id: docker_build_dnscrypt_proxy
        uses: docker/build-push-action@v2
        with:
          context: ./dnscrypt-proxy
          file: ./dnscrypt-proxy/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/dnscrypt-proxy:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/dnscrypt-proxy:2.0.46-beta3
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      
      - name: Image digest
        run: |
          echo ${{ steps.docker_build_chinadns_ng.outputs.digest }}
          echo ${{ steps.docker_build_dnscrypt_proxy.outputs.digest }}