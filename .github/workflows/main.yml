# This is a basic workflow to help you get started with Actions

name: CI to Docker Hub

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    # branches: [ master ]
    # paths:
    #   - '**/**'
    #   - '.github/workflows/main.yml'
  # UTC +8 https://tool.lu/crontab/
  schedule:
    - cron: "0 22 */29 * *"
  # pull_request:
  #   branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-basic:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check Out Repo
        uses: actions/checkout@v3

      # This is the a separate action that sets up buildx runner
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        id: docker_build_apline_latest
        with:
          context: ./alpine
          file: ./alpine/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/alpine:latest
          builder: ${{ steps.buildx.outputs.name }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        id: docker_build_apline_edge
        with:
          context: ./alpine
          file: ./alpine/Dockerfile.edge
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/alpine:edge
          builder: ${{ steps.buildx.outputs.name }}

      - name: Image digest
        run: |
          echo ${{ steps.docker_build_apline_latest.outputs.digest }}
          echo ${{ steps.docker_build_apline_edge.outputs.digest }}

  # build-chinadns-ng:
  #   needs: build-basic
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set Variables
  #       run: |
  #         echo "CHINADNS_NG_VERSION=$(curl -fsSL https://api.github.com/repos/zfl9/chinadns-ng/releases/latest | grep '"name":' | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/ChinaDNS-NG v//g;s/beta./beta/g;s/,//g;s/ //g')" >> $GITHUB_ENV
  #       shell: bash

  #     - name: Check Out Repo
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #       id: buildx

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  #     - name: Build and push Docker images
  #       uses: docker/build-push-action@v3
  #       id: docker_build_chinadns_ng
  #       with:
  #         context: ./chinadns-ng
  #         file: ./chinadns-ng/Dockerfile
  #         push: true
  #         tags: |
  #           ${{ secrets.DOCKER_HUB_USERNAME }}/chinadns-ng:latest
  #         builder: ${{ steps.buildx.outputs.name }}

  #     - name: Image digest
  #       run: |
  #         echo ${{ steps.docker_build_chinadns_ng.outputs.digest }}

  build-xray:
    needs: build-basic
    runs-on: ubuntu-latest
    steps:
      - name: Set Variables
        run: |
          echo "XRAY_PRE_VERSION=$(curl -fsSL https://api.github.com/repos/xtls/xray-core/tags | grep '"name":' | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/v//g;s/,//g;s/ //g')" >> $GITHUB_ENV
          echo "XRAY_VERSION=$(curl -fsSL https://api.github.com/repos/xtls/xray-core/releases/latest | grep '"tag_name":' | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/v//g;s/,//g;s/ //g')" >> $GITHUB_ENV
        shell: bash

      - name: Check Out Repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        id: docker_build_xray_core_pre
        with:
          context: ./xray
          file: ./xray/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/xray:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/xray:${{ env.XRAY_PRE_VERSION }}
          builder: ${{ steps.buildx.outputs.name }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        id: docker_build_xray_core
        with:
          context: ./xray
          file: ./xray/Dockerfile.xray
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/xray:${{ env.XRAY_VERSION }}
          builder: ${{ steps.buildx.outputs.name }}

      - name: Image digest
        run: |
          echo ${{ steps.docker_build_xray_core_pre.outputs.digest }}
          echo ${{ steps.docker_build_xray_core.outputs.digest }}

  build-v2ray:
    needs: build-basic
    runs-on: ubuntu-latest
    steps:
      - name: Set Variables
        run: |
          echo "V2RAY_PRE_VERSION=$(curl -fsSL https://api.github.com/repos/v2fly/v2ray-core/tags | grep '"name":' | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/v//g;s/,//g;s/ //g')" >> $GITHUB_ENV
          echo "V2RAY_VERSION=$(curl -fsSL https://api.github.com/repos/v2fly/v2ray-core/releases/latest | grep '"tag_name":' | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/v//g;s/,//g;s/ //g')" >> $GITHUB_ENV
        shell: bash

      - name: Check Out Repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        id: docker_build_v2ray_core_pre
        with:
          context: ./v2ray
          file: ./v2ray/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/v2ray:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/v2ray:${{ env.V2RAY_PRE_VERSION }}
          builder: ${{ steps.buildx.outputs.name }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        id: docker_build_v2ray_core
        with:
          context: ./v2ray
          file: ./v2ray/Dockerfile.fly
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/v2ray:${{ env.V2RAY_VERSION }}
          builder: ${{ steps.buildx.outputs.name }}

      - name: Image digest
        run: |
          echo ${{ steps.docker_build_v2ray_core_pre.outputs.digest }}
          echo ${{ steps.docker_build_v2ray_core.outputs.digest }}

  build-naiveproxy:
    needs: build-basic
    runs-on: ubuntu-latest
    steps:
      - name: Set Variables
        run: |
          echo "NAIVE_VERSION=$(curl -fsSL https://api.github.com/repos/klzgrad/naiveproxy/releases/latest | grep '"tag_name":' | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/v//g;s/,//g;s/ //g')" >> $GITHUB_ENV
        shell: bash

      - name: Check Out Repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        id: docker_build_naiveproxy
        with:
          context: ./naive
          file: ./naive/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/naive:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/naive:${{ env.NAIVE_VERSION }}
          builder: ${{ steps.buildx.outputs.name }}

      - name: Image digest
        run: |
          echo ${{ steps.docker_build_naiveproxy.outputs.digest }}

  build-syncthing:
    needs: build-basic
    runs-on: ubuntu-latest
    steps:
      - name: Set Variables
        run: |
          echo "SYNCTHING_VERSION=$(curl -fsSL https://api.github.com/repos/syncthing/syncthing/releases/latest | grep '"tag_name":' | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/v//g;s/,//g;s/ //g')" >> $GITHUB_ENV
        shell: bash

      - name: Check Out Repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        id: docker_build_syncthing
        with:
          context: ./syncthing
          file: ./syncthing/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/syncthing:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/syncthing:${{ env.SYNCTHING_VERSION }}
          builder: ${{ steps.buildx.outputs.name }}

      - name: Image digest
        run: |
          echo ${{ steps.docker_build_syncthing.outputs.digest }}

  # build-kms:
  #   needs: build-basic
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set Variables
  #       run: |
  #         echo "KMS_VERSION=$(curl -fsSL https://api.github.com/repos/Wind4/vlmcsd/releases/latest | grep '"tag_name":' | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/svn//g;s/,//g;s/ //g')" >> $GITHUB_ENV
  #       shell: bash

  #     - name: Check Out Repo
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #       id: buildx

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  #     - name: Build and push Docker images
  #       uses: docker/build-push-action@v3
  #       id: docker_build_kms
  #       with:
  #         context: ./kms
  #         file: ./kms/Dockerfile
  #         push: true
  #         tags: |
  #           ${{ secrets.DOCKER_HUB_USERNAME }}/kms:latest
  #         builder: ${{ steps.buildx.outputs.name }}

  #     - name: Image digest
  #       run: |
  #         echo ${{ steps.docker_build_kms.outputs.digest }}

  build-lego:
    needs: build-basic
    runs-on: ubuntu-latest
    steps:
      - name: Set Variables
        run: |
          echo "LEGO_VERSION=$(curl -fsSL https://api.github.com/repos/go-acme/lego/releases/latest | grep '"tag_name":' | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/v//g;s/,//g;s/ //g')" >> $GITHUB_ENV
        shell: bash

      - name: Check Out Repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        id: docker_build_lego
        with:
          context: ./lego
          file: ./lego/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/lego:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/lego:${{ env.LEGO_VERSION }}
          builder: ${{ steps.buildx.outputs.name }}

      - name: Image digest
        run: |
          echo ${{ steps.docker_build_lego.outputs.digest }}

  build-traefik:
    needs: build-basic
    runs-on: ubuntu-latest
    steps:
      - name: Set Variables
        run: |
          echo "TRAEFIK_VERSION=$(curl -fsSL https://api.github.com/repos/traefik/traefik/releases/latest | grep '"tag_name":' | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/v//g;s/,//g;s/ //g')" >> $GITHUB_ENV
        shell: bash

      - name: Check Out Repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        id: docker_build_traefik
        with:
          context: ./traefik
          file: ./traefik/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/traefik:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/traefik:${{ env.TRAEFIK_VERSION }}
          builder: ${{ steps.buildx.outputs.name }}

      - name: Image digest
        run: |
          echo ${{ steps.docker_build_traefik.outputs.digest }}

  # build-samba:
  #   needs: build-basic
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check Out Repo
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #       id: buildx

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  #     - name: Build and push Docker images
  #       uses: docker/build-push-action@v3
  #       id: docker_build_samba
  #       with:
  #         context: ./samba
  #         file: ./samba/Dockerfile
  #         push: true
  #         tags: |
  #           ${{ secrets.DOCKER_HUB_USERNAME }}/samba:latest
  #         builder: ${{ steps.buildx.outputs.name }}

  #     - name: Image digest
  #       run: |
  #         echo ${{ steps.docker_build_samba.outputs.digest }}

  build-caddy:
    needs: build-basic
    runs-on: ubuntu-latest
    steps:
      - name: Set Variables
        run: |
          echo "CADDY_VERSION=$(curl -fsSL https://api.github.com/repos/caddyserver/caddy/releases/latest | grep '"tag_name":' | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/v//g;s/,//g;s/ //g')" >> $GITHUB_ENV
        shell: bash

      - name: Check Out Repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        id: docker_build_caddy
        with:
          context: ./caddy/v2
          file: ./caddy/v2/Dockerfile.lxhao61
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/caddy:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/caddy:${{ env.CADDY_VERSION }}
          builder: ${{ steps.buildx.outputs.name }}

      - name: Image digest
        run: |
          echo ${{ steps.docker_build_caddy.outputs.digest }}

  # build-udp2raw:
  #   needs: build-basic
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set Variables
  #       run: |
  #         echo "UDP2RAW_VERSION=$(curl -fsSL https://api.github.com/repos/wangyu-/udp2raw-tunnel/releases/latest | grep '"tag_name":' | head -n 1 | sed -E 's/.*"([^"]+)".*/\1/')" >> $GITHUB_ENV
  #       shell: bash

  #     - name: Check Out Repo
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #       id: buildx

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  #     - name: Build and push Docker images
  #       uses: docker/build-push-action@v3
  #       id: docker_build_udp2raw
  #       with:
  #         context: ./udp2raw
  #         file: ./udp2raw/Dockerfile
  #         push: true
  #         tags: |
  #           ${{ secrets.DOCKER_HUB_USERNAME }}/udp2raw:latest
  #           ${{ secrets.DOCKER_HUB_USERNAME }}/udp2raw:${{ env.UDP2RAW_VERSION }}
  #         builder: ${{ steps.buildx.outputs.name }}

  #     - name: Image digest
  #       run: |
  #         echo ${{ steps.docker_build_udp2raw.outputs.digest }}

  # build-tinyfec:
  #   needs: build-basic
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set Variables
  #       run: |
  #         echo "TINYVPN_VERSION=$(curl -fsSL https://api.github.com/repos/wangyu-/tinyfecvpn/releases/latest | grep '"tag_name":' | head -n 1 | sed -E 's/.*"([^"]+)".*/\1/')" >> $GITHUB_ENV
  #       shell: bash

  #     - name: Check Out Repo
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #       id: buildx

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  #     - name: Build and push Docker images
  #       uses: docker/build-push-action@v3
  #       id: docker_build_tinyfec
  #       with:
  #         context: ./tinyfec
  #         file: ./tinyfec/Dockerfile
  #         push: true
  #         tags: |
  #           ${{ secrets.DOCKER_HUB_USERNAME }}/tinyfec:latest
  #           ${{ secrets.DOCKER_HUB_USERNAME }}/tinyfec:${{ env.TINYVPN_VERSION }}
  #         builder: ${{ steps.buildx.outputs.name }}

  #     - name: Image digest
  #       run: |
  #         echo ${{ steps.docker_build_tinyfec.outputs.digest }}

  build-frp:
    needs: build-basic
    runs-on: ubuntu-latest
    steps:
      - name: Set Variables
        run: |
          echo "FRP_VERSION=$(curl -fsSL https://api.github.com/repos/fatedier/frp/releases/latest | grep '"tag_name":' | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/v//g;s/,//g;s/ //g')" >> $GITHUB_ENV
        shell: bash

      - name: Check Out Repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        id: docker_build_frps
        with:
          context: ./frp
          file: ./frp/Dockerfile.server
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/frp:server
            ${{ secrets.DOCKER_HUB_USERNAME }}/frp:${{ env.FRP_VERSION }}-server
          builder: ${{ steps.buildx.outputs.name }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        id: docker_build_frpc
        with:
          context: ./frp
          file: ./frp/Dockerfile.client
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/frp:client
            ${{ secrets.DOCKER_HUB_USERNAME }}/frp:${{ env.FRP_VERSION }}-client
          builder: ${{ steps.buildx.outputs.name }}

      - name: Image digest
        run: |
          echo ${{ steps.docker_build_frps.outputs.digest }}
          echo ${{ steps.docker_build_frpc.outputs.digest }}

  # build-kcptun:
  #   needs: build-basic
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set Variables
  #       run: |
  #         echo "KCPTUN_VERSION=$(curl -fsSL https://api.github.com/repos/xtaci/kcptun/releases/latest | grep '"tag_name":' | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/v//g;s/,//g;s/ //g')" >> $GITHUB_ENV
  #       shell: bash

  #     - name: Check Out Repo
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #       id: buildx

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  #     - name: Build and push Docker images
  #       uses: docker/build-push-action@v3
  #       id: docker_build_kcptun_server
  #       with:
  #         context: ./kcptun
  #         file: ./kcptun/Dockerfile.server
  #         push: true
  #         tags: |
  #           ${{ secrets.DOCKER_HUB_USERNAME }}/kcptun:latest
  #           ${{ secrets.DOCKER_HUB_USERNAME }}/kcptun:${{ env.KCPTUN_VERSION }}-server
  #         builder: ${{ steps.buildx.outputs.name }}

  #     - name: Build and push Docker images
  #       uses: docker/build-push-action@v3
  #       id: docker_build_kcptun_client
  #       with:
  #         context: ./kcptun
  #         file: ./kcptun/Dockerfile.client
  #         push: true
  #         tags: |
  #           ${{ secrets.DOCKER_HUB_USERNAME }}/kcptun:latest
  #           ${{ secrets.DOCKER_HUB_USERNAME }}/kcptun:${{ env.KCPTUN_VERSION }}-client
  #         builder: ${{ steps.buildx.outputs.name }}

  #     - name: Image digest
  #       run: |
  #         echo ${{ steps.docker_build_kcptun_server.outputs.digest }}
  #         echo ${{ steps.docker_build_kcptun_client.outputs.digest }}
